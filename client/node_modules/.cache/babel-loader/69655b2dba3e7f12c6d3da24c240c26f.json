{"ast":null,"code":"import n, { freeze as r } from \"immer\";\nimport { useState as t, useCallback as o, useMemo as f, useReducer as u } from \"react\";\n\nfunction i(f) {\n  var u = t(function () {\n    return r(\"function\" == typeof f ? f() : f, !0);\n  }),\n      i = u[1];\n  return [u[0], o(function (t) {\n    i(\"function\" == typeof t ? n(t) : r(t));\n  }, [])];\n}\n\nfunction e(r, t, o) {\n  var i = f(function () {\n    return n(r);\n  }, [r]);\n  return u(i, t, o);\n}\n\nexport { i as useImmer, e as useImmerReducer };","map":{"version":3,"mappings":";;;SAYgBA,EAASC;EAAAA,QACIC,EAAS;IAAA,OAClCC,EAC0B,qBAAjBF,CAAiB,GAAaA,GAAb,GAA8BA,CADxDE,EACwDF,CACtD,CAFFE,CADkC;EAGhC,CAHuBD,CADJD;EAAAA,IACXG,QADWH;EAOvB,OAAO,OAELI,EAAY,UAACC,CAAD,EAACA;IACwBF,EAAZ,qBAAZE,CAAY,GAAwBC,EAAQD,CAARC,CAAxB,GACNJ,EAAOG,CAAPH,CADkBC;EACXE,CAF1BD,EAGG,EAHHA,CAFK,CAAP;AAKK;;AAAA,SASSG,CATT,CAULC,CAVK,EAWLC,CAXK,EAYLC,CAZK,EAYLA;EAEA,IAAMC,IAAgBC,EAAQ;IAAA,OAAMN,EAAQE,CAARF,CAAN;EAAcE,CAAtBI,EAAgC,CAACJ,CAAD,CAAhCI,CAAtB;EACA,OAAOC,EAAWF,CAAXE,EAA0BJ,CAA1BI,EAA+CH,CAA/CG,CAAP;AAAsDH;;AAAAA","names":["useImmer","initialValue","useState","freeze","updateValue","useCallback","updater","produce","useImmerReducer","reducer","initialState","initialAction","cachedReducer","useMemo","useReducer"],"sources":["C:\\Users\\swadh\\OneDrive\\Desktop\\MERN-Stack-todo-website-master\\client\\node_modules\\use-immer\\src\\index.ts"],"sourcesContent":["import produce, { Draft, nothing, freeze } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type Reducer<S = any, A = any> = (\n  draftState: Draft<S>,\n  action: A\n) => void | (S extends undefined ? typeof nothing : S);\nexport type DraftFunction<S> = (draft: Draft<S>) => void;\nexport type Updater<S> = (arg: S | DraftFunction<S>) => void;\nexport type ImmerHook<S> = [S, Updater<S>];\nexport function useImmer<S = any>(initialValue: S | (() => S)): ImmerHook<S>;\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(() =>\n    freeze(\n      typeof initialValue === \"function\" ? initialValue() : initialValue,\n      true\n    )\n  );\n  return [\n    val,\n    useCallback((updater) => {\n      if (typeof updater === \"function\") updateValue(produce(updater));\n      else updateValue(freeze(updater));\n    }, []),\n  ];\n}\n\nexport function useImmerReducer<S = any, A = any>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  initialAction?: (initial: any) => S\n): [S, Dispatch<A>];\nexport function useImmerReducer(\n  reducer: any,\n  initialState: any,\n  initialAction: any\n) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initialState as any, initialAction);\n}\n"]},"metadata":{},"sourceType":"module"}